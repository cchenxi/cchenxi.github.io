<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 陈曦的技术博客</title><link>https://cchenxi.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 陈曦的技术博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 19 Nov 2021 19:00:36 +0800</lastBuildDate><atom:link href="https://cchenxi.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>在Java中写一个正确的单例模式</title><link>https://cchenxi.github.io/posts/%E5%9C%A8java%E4%B8%AD%E5%86%99%E4%B8%80%E4%B8%AA%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 19 Nov 2021 19:00:36 +0800</pubDate><guid>https://cchenxi.github.io/posts/%E5%9C%A8java%E4%B8%AD%E5%86%99%E4%B8%80%E4%B8%AA%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>本文参考极客时间每日一课《在Java中如何写一个正确的单例模式？》
1. 单例/单例设计模式 一个类只允许创建一个对象（实例），这个类就是一个单例类。这种设计模式叫做单例设计模式，简称单例模式。
实现一个单例类，需要关注：
构造函数私有，避免通过new关键字创建实例 创建时的线程安全问题 是否支持延迟加载 getInstance是否高性能（锁） 2. 单例模式的写法 2.1. 饿汉式 public class Singleton { private static final Singleton INSTANCE = new Singleton(); private Singleton() { } public static Singleton getInstance() { return INSTANCE; } } public class Singleton { private static Singleton instance; static { instance = new Singleton(); } private Singleton() {} public static Singleton getInstance() { return instance; } } 类加载时，静态实例就已经创建好并初始化好了。</description></item></channel></rss>